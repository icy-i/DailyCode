622. Design Circular Queue
https://leetcode.com/problems/design-circular-queue/
class MyCircularQueue {
        private int [] store ;
        private int capacity;
        private int size;
        private int front;
        private int back;
    public MyCircularQueue(int k) {
        this.store = new int[k];
        this.capacity=k;
        this.size=0;
        this.front=0;
        this.back=-1;
    }
    
    public boolean enQueue(int value) {
        if(this.isFull() == true) return false;
        this.back=(this.back+1)%this.capacity;
        this.store[back]=value;
        this.size++;
        return true;
    }
    
    public boolean deQueue() {
        if(this.isEmpty()==true) return false;
        this.front=(this.front+1)%this.capacity;
        this.size--;
        return true;
        
    }
    
    public int Front() {
        if(this.isEmpty()==true) return -1;
        return this.store[this.front];
    }
    
    public int Rear() {
        if(this.isEmpty()==true) return -1;
        return this.store[this.back];
    }
    
    public boolean isEmpty() {
        return this.size==0;
    }
    
    public boolean isFull() {
        return this.size==this.capacity;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
