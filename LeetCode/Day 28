88. Merge Sorted Array
https://leetcode.com/problems/merge-sorted-array/
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int[] k=new int[m];
        for (int i=0;i<m;i++)
        {
            k[i]=nums1[i];
        }
        int i=0;
        int j=0;
        int f=0;
        while(i<m && j<n)
        {
            if(k[i] < nums2[j])
            {
                nums1[f]=k[i];
                i++;
            }
            else
            {
                nums1[f]=nums2[j];
                j++;
            }
            f++;
        }
        while(i<m)
        {
            nums1[f]=k[i];
            i++;
            f++;
        }
        while(j<n)
        {
            nums1[f]=nums2[j];
            j++;
            f++;
        }
    }
}


977. Squares of a Sorted Array
https://leetcode.com/problems/squares-of-a-sorted-array/
class Solution {
    public int[] sortedSquares(int[] nums) {
        int n=nums.length;
        int p=n;
        for(int i=0;i<n;i++)
        {
            if(nums[i]>=0)
            {
                p=i;
                break;
            }
        }
        int [] ans=new int[n];
        int pp=p;
        int np=p-1;
        int f=0;
        while(np>-1 && pp<n)
        {
            int ps=nums[pp]*nums[pp];
            int ns=nums[np]*nums[np];
            if(ps<ns)
            {
                ans[f]=ps;
                pp++;
            }
            else
            {
                ans[f]=ns;
                np--;
            }
            f++;
        }
        while(pp<n)
        {
            int ps=nums[pp]*nums[pp];
            ans[f]=ps;
            pp++;
            f++;
        }
        while(np>-1)
        {
            int ns=nums[np]*nums[np];
            ans[f]=ns;
            np--;
            f++;
        }
        return ans;
    }
}
