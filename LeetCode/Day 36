202. Happy Number
https://leetcode.com/problems/happy-number/
class Solution {
    public static HashMap<Integer,Boolean> keep=new HashMap<Integer,Boolean>();
    static
    {
    keep.put(0,false);
    keep.put(1,true);
    keep.put(2,false);
    keep.put(3,false);
    keep.put(4,false);
    keep.put(5,false);
    keep.put(6,false);
    keep.put(7,true);
    keep.put(8,false);
    keep.put(9,false);
    }
    public boolean isHappy(int n) {
        if(keep.containsKey(n)) return keep.get(n);
        int s=0;
        int f=n;
        while(n>0)
        {
            int k=n%10;
            s+=(k)*(k);
            n/=10; 
        }
        keep.put(f,isHappy(s));
        return keep.get(f);
    }
}


K*./Hmm***************************************************************************************

141. Linked List Cycle
https://leetcode.com/problems/linked-list-cycle/
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null || head.next==null || head.next.next==null) return false;
        ListNode slow_pointer=head.next;
        ListNode fast_pointer=head.next.next;
        while(slow_pointer!=fast_pointer)
        {
            if(fast_pointer.next==null || fast_pointer.next.next==null)
                return false;
            fast_pointer=fast_pointer.next.next;
            slow_pointer=slow_pointer.next;
        }
        return true;
    }
}
