1329. Sort the Matrix Diagonally
https://leetcode.com/problems/sort-the-matrix-diagonally/
class Solution {
    public int[][] diagonalSort(int[][] mat) {
        int m=mat.length;
        int n=mat[0].length;
        for(int j=0;j<n;j++)
        {
            ArrayList<Integer> temp=new ArrayList<>();
            int i=0;
            int s=j;
            temp.add(mat[i][s]);
            i++;
            s++;
            while(i<m && s<n)
            {
                temp.add(mat[i][s]);
                i++;
                s++;
            }
            Collections.sort(temp);
            //System.out.println(temp);
            i=0;
            s=j;
            mat[i][s]=temp.get(0);
            i++;
            s++;
            int c=1;
            while(i<m && s<n)
            {
                mat[i][s]=temp.get(c);
                i++;
                s++;
                c++;
            } 
        }
        for(int i=1;i<m;i++)
        {
            ArrayList<Integer> temp=new ArrayList<>();
            int j=0;
            int s=i;
            temp.add(mat[s][j]);
            j++;
            s++;
            while(j<n && s<m)
            {
                temp.add(mat[s][j]);
                j++;
                s++;
            }
            Collections.sort(temp);
            j=0;
            s=i;
            mat[s][j]=temp.get(0);
            j++;
            s++;
            int c=1;
            while(j<n && s<m)
            {
                mat[s][j]=temp.get(c);
                j++;
                s++;
                c++;
            } 
        }
        return mat;
        
    }
}



300. Longest Increasing Subsequence
https://leetcode.com/problems/longest-increasing-subsequence/

class Solution {
    public int lengthOfLIS(int[] nums) {
        ArrayList<Integer> ans=new ArrayList<>();
        ans.add(nums[0]);
        for(int i=1;i<nums.length;i++)
        {
            if(nums[i]>ans.get(ans.size()-1))
            {
                ans.add(nums[i]);
            }
            else
            {
                int idx=binaryceil(ans,nums[i]);
                if(idx!=-1)
                {
                    ans.set(idx,nums[i]);
                }
            }
        }
        return ans.size();
    }
    int binaryceil(ArrayList<Integer> array,int key)
    {
        int start=0;
        int end=array.size()-1;
        int result=-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(array.get(mid)==key)
                return -1;
            else if(array.get(mid)<key)
                start=mid+1;
            else
            {
                result=mid;
                end=mid-1;
            }   
        }
        return result;
    }
}
